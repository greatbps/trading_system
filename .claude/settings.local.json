{
  "permissions": {
    "allow": [
      "Bash(mv:*)",
      "Bash(python:*)",
      "Bash(sed:*)",
      "Bash(mkdir:*)",
      "Bash(chcp:*)",
      "Bash(grep:*)",
      "Bash(gemini:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(/c/Users/great/AppData/Roaming/npm/gemini --version)",
      "Bash(ls:*)",
      "Bash(node:*)",
      "Bash(touch:*)",
      "Bash(D:/trading_system/trading_env_64/Scripts/python.exe d:/trading_system/main.py)",
      "Bash(timeout:*)",
      "Bash(D:/trading_system/trading_env_64/Scripts/python.exe -c \"\nimport sys\nsys.path.append(''.'')\nfrom core.trading_system import TradingSystem\nfrom config import get_config\n\nprint(''Phase 6 통합 테스트 시작...'')\nconfig = get_config()\nsystem = TradingSystem()\n\n# 시스템 초기화\nprint(''시스템 초기화 중...'')\nsystem.initialize_components()\n\n# AI Controller 확인\nif hasattr(system, ''ai_controller'') and system.ai_controller:\n    print(''✅ AI Controller 정상 초기화됨'')\nelse:\n    print(''❌ AI Controller 초기화 실패'')\n\n# Phase 6 모듈 확인\ntry:\n    from backtesting.backtesting_engine import BacktestingEngine\n    from backtesting.strategy_validator import StrategyValidator  \n    from backtesting.historical_analyzer import HistoricalAnalyzer\n    from backtesting.performance_visualizer import PerformanceVisualizer\n    \n    # 백테스팅 엔진 초기화 테스트\n    engine = BacktestingEngine(config)\n    validator = StrategyValidator(config)\n    analyzer = HistoricalAnalyzer(config) \n    visualizer = PerformanceVisualizer()\n    \n    print(''✅ 모든 Phase 6 모듈 정상 로드됨'')\n    print(''✅ 백테스팅 엔진 초기화 성공'')\n    print(''✅ 전략 검증기 초기화 성공'')\n    print(''✅ 과거 데이터 분석기 초기화 성공'')\n    print(''✅ 성능 시각화 모듈 초기화 성공'')\n    \nexcept Exception as e:\n    print(f''❌ Phase 6 모듈 초기화 오류: {e}'')\n\nprint(''\\n🎉 Phase 6 통합 테스트 완료!'')\nprint(''시스템이 준비되었습니다. main.py를 실행하여 전체 메뉴를 사용할 수 있습니다.'')\n\")",
      "Bash(D:/trading_system/trading_env_64/Scripts/python.exe -c \"\nimport sys\nsys.path.append(''.'')\n\nprint(''Config 모듈 테스트...'')\ntry:\n    import config\n    print(''✅ config 모듈 로드 성공'')\n    \n    # Config 클래스 직접 사용\n    config_instance = config.Config()\n    print(''✅ Config 인스턴스 생성 성공'')\n    \n    # Phase 6 모듈 테스트\n    from backtesting.backtesting_engine import BacktestingEngine\n    from backtesting.strategy_validator import StrategyValidator  \n    from backtesting.historical_analyzer import HistoricalAnalyzer\n    from backtesting.performance_visualizer import PerformanceVisualizer\n    \n    # 백테스팅 엔진 초기화 테스트\n    engine = BacktestingEngine(config_instance)\n    validator = StrategyValidator(config_instance)\n    analyzer = HistoricalAnalyzer(config_instance) \n    visualizer = PerformanceVisualizer()\n    \n    print(''✅ 모든 Phase 6 모듈 정상 로드됨'')\n    print(''✅ 백테스팅 엔진 초기화 성공'')\n    print(''✅ 전략 검증기 초기화 성공'')\n    print(''✅ 과거 데이터 분석기 초기화 성공'')\n    print(''✅ 성능 시각화 모듈 초기화 성공'')\n    \nexcept Exception as e:\n    print(f''❌ 오류: {e}'')\n    import traceback\n    traceback.print_exc()\n\nprint(''\\n🎉 Phase 6 모듈 테스트 완료!'')\n\")",
      "Bash(D:/trading_system/trading_env_64/Scripts/python.exe -c \"\nimport sys\nsys.path.append(''.'')\n\nprint(''Phase 6 Module Integration Test'')\ntry:\n    import config\n    print(''[PASS] config module loaded'')\n    \n    # Config 클래스 직접 사용\n    config_instance = config.Config()\n    print(''[PASS] Config instance created'')\n    \n    # Phase 6 모듈 테스트\n    from backtesting.backtesting_engine import BacktestingEngine\n    from backtesting.strategy_validator import StrategyValidator  \n    from backtesting.historical_analyzer import HistoricalAnalyzer\n    from backtesting.performance_visualizer import PerformanceVisualizer\n    \n    print(''[PASS] All Phase 6 modules imported'')\n    \n    # 백테스팅 엔진 초기화 테스트\n    engine = BacktestingEngine(config_instance)\n    validator = StrategyValidator(config_instance)\n    analyzer = HistoricalAnalyzer(config_instance) \n    visualizer = PerformanceVisualizer()\n    \n    print(''[PASS] BacktestingEngine initialized'')\n    print(''[PASS] StrategyValidator initialized'')\n    print(''[PASS] HistoricalAnalyzer initialized'')  \n    print(''[PASS] PerformanceVisualizer initialized'')\n    \n    # AI 컨트롤러 테스트\n    if hasattr(engine, ''ai_controller'') and engine.ai_controller:\n        print(''[PASS] AI Controller in BacktestingEngine working'')\n    else:\n        print(''[WARNING] AI Controller in BacktestingEngine not initialized'')\n        \n    if hasattr(validator, ''ai_controller'') and validator.ai_controller:\n        print(''[PASS] AI Controller in StrategyValidator working'')\n    else:\n        print(''[WARNING] AI Controller in StrategyValidator not initialized'')\n        \n    if hasattr(analyzer, ''ai_controller'') and analyzer.ai_controller:\n        print(''[PASS] AI Controller in HistoricalAnalyzer working'')\n    else:\n        print(''[WARNING] AI Controller in HistoricalAnalyzer not initialized'')\n    \n    print('''')\n    print(''Phase 6 Integration Test COMPLETED SUCCESSFULLY'')\n    print(''All backtesting modules are ready for use.'')\n    \nexcept Exception as e:\n    print(f''[ERROR] {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(D:/trading_system/trading_env_64/Scripts/python.exe:*)"
    ],
    "deny": []
  }
}