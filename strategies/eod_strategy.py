#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
trading_system/strategies/eod_strategy.py

Ïû• ÎßàÍ∞ê ÎèôÏãúÌò∏Í∞Ä(EOD, End of Day) Ï†ÑÎûµ
"""

from .base_strategy import BaseStrategy
from typing import Dict, Any, List
import pandas as pd

class EodStrategy(BaseStrategy):
    """
    Ïû• ÎßàÍ∞ê(EOD) Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Îã§Ïùå ÎÇ† ÏãúÏ¥àÍ∞Ä Îß§Îß§Î•º Í≤∞Ï†ïÌïòÎäî Ï†ÑÎûµ
    - Ïû• ÎßâÌåêÏóê Í∞ïÌïú ÏÉÅÏäπ ÎßàÍ∞ê Ïãú Îã§Ïùå ÎÇ† Í∞≠ ÏÉÅÏäπÏùÑ Í∏∞ÎåÄÌïòÍ≥† Îß§Ïàò
    """

    def __init__(self, config):
        super().__init__(config)
        self.name = "EodStrategy"
        self.params = {
            'min_closing_strength': 0.02,  # Ï¢ÖÍ∞Ä Í∞ïÏÑ∏ ÏµúÏÜå Í∏∞Ï§Ä (ÏãúÍ∞Ä ÎåÄÎπÑ 2% Ïù¥ÏÉÅ ÏÉÅÏäπ)
            'min_volume_ratio': 1.5,       # ÏµúÏÜå Í±∞ÎûòÎüâ ÎπÑÏú® (ÌèâÍ∑† ÎåÄÎπÑ)
        }
        self.logger.info("üìà EOD Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")

    async def generate_signals(self, stock_data: Any, analysis_result: Dict) -> Dict[str, Any]:
        """Ïû• ÎßàÍ∞ê Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Îß§Îß§ Ïã†Ìò∏ ÏÉùÏÑ±"""
        try:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.info(f"üìä {symbol} EOD Ïã†Ìò∏ ÏÉùÏÑ± Ï§ë...")

            # Î∂ÑÏÑù Í≤∞Í≥ºÏóêÏÑú ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            technical_details = analysis_result.get('technical_details', {})
            
            open_price = technical_details.get('open', 0)
            close_price = technical_details.get('close', 0)
            volume_ratio = technical_details.get('volume_ratio', 0)

            if not all([open_price, close_price, volume_ratio]):
                 self.logger.warning(f"‚ö†Ô∏è {symbol}Ïóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±. EOD Ïã†Ìò∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
                 return self._create_empty_signal()

            # Ïã†Ìò∏ Ï†êÏàò Í≥ÑÏÇ∞
            score = 50
            
            # 1. Ï¢ÖÍ∞Ä Í∞ïÏÑ∏ ÌôïÏù∏ (ÏñëÎ¥â ÌÅ¨Í∏∞)
            closing_strength = (close_price - open_price) / open_price
            is_strong_close = closing_strength >= self.params['min_closing_strength']
            
            if is_strong_close:
                score += 30
            
            # 2. Í±∞ÎûòÎüâ ÌôïÏù∏
            is_volume_surge = volume_ratio >= self.params['min_volume_ratio']
            if is_volume_surge:
                score += 20

            # 3. Í∞ïÌïú ÎßàÍ∞ê + Í±∞ÎûòÎüâ ÎèôÏãú Ï∂©Ï°± Ïãú Î≥¥ÎÑàÏä§
            if is_strong_close and is_volume_surge:
                score += 15

            final_score = max(0, min(100, score))

            # Ïã†Ìò∏ Í≤∞Ï†ï (EOD Ï†ÑÎûµÏùÄ Î≥¥ÌÜµ Îã§ÏùåÎÇ† ÏãúÏ¥àÍ∞Ä Îß§ÏàòÎ•º ÏùòÎØ∏)
            if final_score >= 75:
                signal_type = "BUY_TOMORROW_OPEN"
                action = "BUY"
            else:
                signal_type = "HOLD"
                action = "HOLD"

            return {
                'signal_strength': round(final_score, 1),
                'signal_type': signal_type,
                'action': action,
                'confidence': min(1.0, final_score / 100),
                'details': {
                    'open_price': open_price,
                    'close_price': close_price,
                    'closing_strength': closing_strength,
                    'is_strong_close': is_strong_close,
                    'volume_ratio': volume_ratio,
                    'is_volume_surge': is_volume_surge,
                },
                'risk_level': "MEDIUM",
                'timestamp': pd.Timestamp.now().isoformat()
            }

        except Exception as e:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.error(f"‚ùå {symbol} EOD Ïã†Ìò∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return self._create_empty_signal()

    def _create_empty_signal(self) -> Dict[str, Any]:
        """Îπà Ïã†Ìò∏ ÏÉùÏÑ±"""
        return {
            'signal_strength': 50.0,
            'signal_type': "HOLD",
            'action': "HOLD",
            'confidence': 0.5,
            'details': {},
            'risk_level': "MEDIUM",
            'timestamp': pd.Timestamp.now().isoformat()
        }
