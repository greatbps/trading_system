#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
trading_system/strategies/breakout_strategy.py

ÎèåÌåå Îß§Îß§ Ï†ÑÎûµ
"""

from .base_strategy import BaseStrategy
from typing import Dict, Any, List
import pandas as pd

class BreakoutStrategy(BaseStrategy):
    """
    Í∞ÄÍ≤© ÎèåÌåå Î∞è Í±∞ÎûòÎüâ Í∏âÏ¶ùÏùÑ Í∏∞Î∞òÏúºÎ°ú Ìïú Îß§Îß§ Ï†ÑÎûµ
    - NÏùº Ïã†Í≥†Í∞Ä ÎèåÌåå Ïãú Îß§Ïàò
    - Í±∞ÎûòÎüâ Ï°∞Í±¥ Ï∂©Ï°± Ïãú Ïã†Ìò∏ Í∞ïÌôî
    """

    def __init__(self, config):
        super().__init__(config)
        self.name = "BreakoutStrategy"
        self.params = {
            'breakout_period': 20,  # ÎèåÌåå Í∏∞Í∞Ñ (Ïùº)
            'volume_multiplier': 2.0,  # Í±∞ÎûòÎüâ Î∞∞Ïàò (ÌèâÍ∑† ÎåÄÎπÑ)
        }
        self.logger.info("üìà ÎèåÌåå Îß§Îß§ Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")

    async def generate_signals(self, stock_data: Any, analysis_result: Dict) -> Dict[str, Any]:
        """ÎèåÌåå Í∏∞Î∞ò Îß§Îß§ Ïã†Ìò∏ ÏÉùÏÑ±"""
        try:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.info(f"üìä {symbol} ÎèåÌåå Ïã†Ìò∏ ÏÉùÏÑ± Ï§ë...")

            # Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌïÑÏöî (Ïã§Ï†úÎ°úÎäî Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞ÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
            # Ïù¥ ÏòàÏ†úÏóêÏÑúÎäî analysis_resultÏóê ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§Í≥† Í∞ÄÏ†ïÌï©ÎãàÎã§.
            technical_details = analysis_result.get('technical_details', {})
            
            current_price = technical_details.get('current_price', 0)
            recent_high = technical_details.get('recent_high', 0) # NÏùº Í≥†Í∞Ä
            volume_ratio = technical_details.get('volume_ratio', 0) # Í±∞ÎûòÎüâ ÎπÑÏú®

            if not all([current_price, recent_high, volume_ratio]):
                 self.logger.warning(f"‚ö†Ô∏è {symbol}Ïóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±. ÎèåÌåå Ïã†Ìò∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
                 return self._create_empty_signal()

            # Ïã†Ìò∏ Ï†êÏàò Í≥ÑÏÇ∞
            score = 50
            
            # 1. Í∞ÄÍ≤© ÎèåÌåå ÌôïÏù∏
            is_breakout = current_price >= recent_high
            if is_breakout:
                score += 30
            
            # 2. Í±∞ÎûòÎüâ Ï°∞Í±¥ ÌôïÏù∏
            is_volume_surge = volume_ratio >= self.params['volume_multiplier']
            if is_volume_surge:
                score += 20

            # 3. ÎèåÌåå + Í±∞ÎûòÎüâ ÎèôÏãú Ï∂©Ï°± Ïãú Î≥¥ÎÑàÏä§
            if is_breakout and is_volume_surge:
                score += 15

            final_score = max(0, min(100, score))

            # Ïã†Ìò∏ Í≤∞Ï†ï
            if final_score >= 80:
                signal_type = "STRONG_BUY"
                action = "BUY"
            elif final_score >= 65:
                signal_type = "BUY"
                action = "BUY"
            else:
                signal_type = "HOLD"
                action = "HOLD"

            return {
                'signal_strength': round(final_score, 1),
                'signal_type': signal_type,
                'action': action,
                'confidence': min(1.0, final_score / 100),
                'details': {
                    'current_price': current_price,
                    'breakout_target_price': recent_high,
                    'is_breakout': is_breakout,
                    'volume_ratio': volume_ratio,
                    'is_volume_surge': is_volume_surge,
                },
                'risk_level': "HIGH" if is_breakout else "MEDIUM",
                'timestamp': pd.Timestamp.now().isoformat()
            }

        except Exception as e:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.error(f"‚ùå {symbol} ÎèåÌåå Ïã†Ìò∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return self._create_empty_signal()

    def _create_empty_signal(self) -> Dict[str, Any]:
        """Îπà Ïã†Ìò∏ ÏÉùÏÑ±"""
        return {
            'signal_strength': 50.0,
            'signal_type': "HOLD",
            'action': "HOLD",
            'confidence': 0.5,
            'details': {},
            'risk_level': "MEDIUM",
            'timestamp': pd.Timestamp.now().isoformat()
        }
