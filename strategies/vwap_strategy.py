#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
trading_system/strategies/vwap_strategy.py

VWAP (Volume-Weighted Average Price) Í∏∞Î∞ò Ï†ÑÎûµ
"""

from .base_strategy import BaseStrategy
from typing import Dict, Any, List
import pandas as pd

class VwapStrategy(BaseStrategy):
    """VWAP Í∏∞Î∞ò Îß§Îß§ Ï†ÑÎûµ"""

    def __init__(self, config):
        super().__init__(config)
        self.name = "VwapStrategy"
        self.params = {
            'vwap_period': 'D',  # 'D' for daily, 'W' for weekly
        }
        self.logger.info("üìà VWAP Ï†ÑÎûµ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")

    async def generate_signals(self, stock_data: Any, analysis_result: Dict) -> Dict[str, Any]:
        """
        VWAPÏùÑ Í∏∞Î∞òÏúºÎ°ú Îß§Îß§ Ïã†Ìò∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
        - ÌòÑÏû¨Í∞ÄÍ∞Ä VWAP ÏúÑÏóê ÏûàÏúºÎ©¥ Îß§Ïàò Ïã†Ìò∏
        - ÌòÑÏû¨Í∞ÄÍ∞Ä VWAP ÏïÑÎûòÏóê ÏûàÏúºÎ©¥ Îß§ÎèÑ Ïã†Ìò∏
        """
        try:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.info(f"üìä {symbol} VWAP Ïã†Ìò∏ ÏÉùÏÑ± Ï§ë...")

            # ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            current_price = getattr(stock_data, 'current_price', 0)
            vwap = getattr(stock_data, 'vwap', 0)

            if not current_price or not vwap:
                self.logger.warning(f"‚ö†Ô∏è {symbol}Ïóê ÎåÄÌïú ÌòÑÏû¨Í∞Ä ÎòêÎäî VWAP Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±ÌïòÏó¨ Ïã†Ìò∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
                return self._create_empty_signal()

            # Ïã†Ìò∏ Ï†êÏàò Í≥ÑÏÇ∞
            score = 50
            price_above_vwap = current_price > vwap
            price_below_vwap = current_price < vwap

            if price_above_vwap:
                # VWAP ÎåÄÎπÑ ÏñºÎßàÎÇò ÏúÑÏóê ÏûàÎäîÏßÄÏóê Îî∞Îùº Ï†êÏàò Í∞ÄÏÇ∞
                score += min(25, ((current_price - vwap) / vwap) * 100)
            elif price_below_vwap:
                # VWAP ÎåÄÎπÑ ÏñºÎßàÎÇò ÏïÑÎûòÏóê ÏûàÎäîÏßÄÏóê Îî∞Îùº Ï†êÏàò Í∞êÏÇ∞
                score -= min(25, ((vwap - current_price) / vwap) * 100)

            final_score = max(0, min(100, score))

            # Ïã†Ìò∏ Í≤∞Ï†ï
            if final_score >= 65:
                signal_type = "BUY"
                action = "BUY"
            elif final_score > 50:
                signal_type = "WEAK_BUY"
                action = "HOLD"
            elif final_score <= 35:
                signal_type = "SELL"
                action = "SELL"
            elif final_score < 50:
                signal_type = "WEAK_SELL"
                action = "HOLD"
            else:
                signal_type = "HOLD"
                action = "HOLD"

            return {
                'signal_strength': round(final_score, 1),
                'signal_type': signal_type,
                'action': action,
                'confidence': min(1.0, final_score / 100),
                'details': {
                    'current_price': current_price,
                    'vwap': vwap,
                    'price_above_vwap': price_above_vwap,
                },
                'risk_level': "MEDIUM", # VWAPÎßåÏúºÎ°úÎäî Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞ÄÍ∞Ä Ïñ¥Î†§ÏõÄ
                'timestamp': pd.Timestamp.now().isoformat()
            }

        except Exception as e:
            symbol = getattr(stock_data, 'symbol', 'UNKNOWN')
            self.logger.error(f"‚ùå {symbol} VWAP Ïã†Ìò∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return self._create_empty_signal()

    def _create_empty_signal(self) -> Dict[str, Any]:
        """Îπà Ïã†Ìò∏ ÏÉùÏÑ±"""
        return {
            'signal_strength': 50.0,
            'signal_type': "HOLD",
            'action': "HOLD",
            'confidence': 0.5,
            'details': {},
            'risk_level': "MEDIUM",
            'timestamp': pd.Timestamp.now().isoformat()
        }
